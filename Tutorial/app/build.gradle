buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

apply plugin: 'com.android.application'

project.ext.modelAssetsDir = new File((File) project.buildDir, '../src/main/assets')


android {
    compileSdkVersion 24
    buildToolsVersion '25.0.0'


    defaultConfig {
        applicationId "com.wearnotch.notchdemo.tutorial"
        minSdkVersion 18
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        debug {
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {

        notch {}

        mock {
            applicationId 'com.wearnotch.notchdemo.tutorial.mock'
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'com.notch.sdk:sdk-android:1.1.219'

    compile 'com.android.support:support-v4:24.2.1'
    compile 'com.android.support:recyclerview-v7:24.2.1'
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:cardview-v7:24.2.1'
    compile 'com.android.support:design:24.2.1'
    compile 'org.greenrobot:eventbus:3.0.0'

    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.afollestad.material-dialogs:core:0.9.0.1'
    compile ('io.socket:socket.io-client:0.8.1') {
        exclude group: 'org.json', module: 'json'
    }
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

task convertObj(type: JavaExec) {
    ext.srcFile1 = file('../model/equipment_tutorial.obj')
    ext.srcFile2 = file('../model/equipment_tutorial.js')
    inputs.file files([srcFile1,srcFile2])
    outputs.dir project.modelAssetsDir

    main = 'com.wearnotch.visualiserutil.ObjConverter'
    classpath = configurations.compile
    args = [ srcFile1.getAbsolutePath(), srcFile2.getAbsolutePath(),
             new File((File) project.modelAssetsDir, 'equipment.dat').getAbsolutePath() ]
}

task convertMtl(type: JavaExec) {
    ext.srcFile = file('../model/equipment_tutorial.mtl')
    inputs.file srcFile
    outputs.dir project.modelAssetsDir

    main = 'com.wearnotch.visualiserutil.MtlConverter'
    classpath = configurations.compile
    args = [ srcFile.getAbsolutePath(),
             new File((File) project.modelAssetsDir, 'equipment_mtl.dat').getAbsolutePath() ]
}

project.afterEvaluate {
    project.tasks.findAll {
        it.name.startsWith('generate') && it.name.endsWith('Assets')
    }.each {
        it.dependsOn convertObj
        it.dependsOn convertMtl
    }
}

